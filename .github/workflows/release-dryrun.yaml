on:
  workflow_call:
    inputs:
      COMMIT_LINTING_ENABLED:
        default: false
        required: false
        type: boolean
      DEBUG:
        default: false
        required: false
        type: boolean
    outputs:
      version:
        description: "Version of the Release DryRun"
        value: ${{ jobs.release-dryrun.outputs.version }}
      skipRelease:
        description: "Should the publishing/releasing of Artefacts be disabled"
        value: ${{ jobs.release-dryrun.outputs.skipRelease }}

jobs:
  #### Release Dry Run
  release-dryrun:
    name: dryrun
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    outputs:
      version: ${{ steps.check-release.outputs.version }}
      skipRelease: ${{ steps.check-release.outputs.skipRelease }}
    steps:
      - uses: actions/checkout@v4
      - uses: dt-uibk-workshop/semantic-release-installer-action@main
      - name: DryRun Release Version
        run: |
          echo "## DryRun: Release Changelog  ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "check logs for details..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "NEXT_RELEASE_VERSION=0.0.0" >> $GITHUB_ENV
          else
            npx semantic-release --dry-run --no-ci --debug=${{ inputs.debug }} --branches ${{ github.ref_name }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_LINTING_ENABLED: ${{ inputs.COMMIT_LINTING_ENABLED }}
      - name: Check DryRun Release
        id: check-release
        run: |
          nextVersion=${{ env.NEXT_RELEASE_VERSION }}
          
          if [[ -z "$nextVersion" ]] ; then
            echo "no new version detected => skipping publishing release"
          
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "### ðŸ”¥DryRun: skipping publishing of release, as versioning on PRs is not supported!" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ðŸ”¥DryRun: skipping publishing of release, as no new version detected!" >> $GITHUB_STEP_SUMMARY
            fi
          
            echo "version=0.0.0" >> "$GITHUB_OUTPUT"
            echo "skipRelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "next/new version detected => ${nextVersion}"
            echo "version=${nextVersion}" >> "$GITHUB_OUTPUT"
            echo "skipRelease=false" >> "$GITHUB_OUTPUT"
          fi
          
          if [[ -f ".NOTES" ]] ; then
            echo "updating github step summary with release-notes from dryrun..."
            cat .NOTES >> $GITHUB_STEP_SUMMARY
          fi
